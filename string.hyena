struct strings{}

import "c.hyena"
import "fmt.hyena"

impl strings {

    is_number(char:u8) bool {
        return char <= '9' and char >= '0';
    }

    is_alpha(char:u8) bool {
        return (char >= 'a' and char <= 'z') or (char >= 'A' and char <= 'Z') or char == '_';
    }

    is_alnum(char:u8) bool {
        return strings::is_number(char) or strings::is_alpha(char);
    }

    is_space(char:u8) bool {
        return char == '\t' or char == '\n' or char == ' ';
    }

    slice_to_cstring(slice:&u8) *u8 {
        if(cast(*u8)malloc(slice.len + 1)) |c_string| {
            var tmp = c_string;
            for(slice) |char| {
                tmp.* = char;
                tmp += 1;
            }
            tmp.* = '\0';
            return c_string;
        } else {
            fmt::println("malloc failed at string::slice_to_cstring()", .{});
            exit(1);
        }
    }

    parse_int(slice:&u8) i32 {
        return strtol(strings::slice_to_cstring(slice),null,10);
    }

    compare(a:&u8, b:&u8) bool {
        if(!strncmp(a.ptr, b.ptr, a.len)) return true;
        return false;
    }
}