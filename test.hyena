struct Bar {x:u8, y:u8}

impl Bar {
    add(self:*Bar) void {
        self.x += 1;
        self.y += 1;
    }

    zero(self:*Bar) void {
        self.x = 0;
        self.y = 0;
    }

    set(self:*Bar, x:u8, y:u8) void {
        self.x = x;
        self.y = y;
    }

    getSum(self:*Bar) u8 {
        return self.x + self.y;
    }
}

fn main() void {
    var c = [][3]i32{
        []i32{99,99,99},
        []i32{99,99,99},
        []i32{99,99,99}
    };

    test_eq(c[0][0],99);
    test_eq(c[0][1],99);
    test_eq(c[0][2],99);
    test_eq(c[1][0],99);
    test_eq(c[1][1],99);
    test_eq(c[1][2],99);
    test_eq(c[2][0],99);
    test_eq(c[2][1],99);
    test_eq(c[2][2],99);

    test_eq(c[0].len, 3);
    test_eq(c[1].len, 3);
    test_eq(c[2].len, 3);

    var barz = [][3]Bar{
         []Bar{Bar{.x = 0, .y = 0}, Bar{.x = 1, .y = 0}, Bar{.x = 2, .y = 0}},
         []Bar{Bar{.x = 0, .y = 1}, Bar{.x = 1, .y = 1}, Bar{.x = 2, .y = 1}},
         []Bar{Bar{.x = 0, .y = 2}, Bar{.x = 1, .y = 2}, Bar{.x = 2, .y = 2}}
    };

    var bar = barz[0..3];

    test_eq(bar.len, 3);
    test_eq(bar[0].len, 3);
    test_eq(bar[1].len, 3);
    test_eq(bar[2].len, 3);

    test_eq(bar[0][0].x, 0);
    test_eq(bar[0][1].x, 1);
    test_eq(bar[0][2].x, 2);

    test_eq(bar[1][0].x, 0);
    test_eq(bar[1][1].x, 1);
    test_eq(bar[1][2].x, 2);

    test_eq(bar[2][0].x, 0);
    test_eq(bar[2][1].x, 1);
    test_eq(bar[2][2].x, 2);

    test_eq(bar[0][0].y, 0);
    test_eq(bar[0][1].y, 0);
    test_eq(bar[0][2].y, 0);

    test_eq(bar[1][0].y, 1);
    test_eq(bar[1][1].y, 1);
    test_eq(bar[1][2].y, 1);

    test_eq(bar[2][0].y, 2);
    test_eq(bar[2][1].y, 2);
    test_eq(bar[2][2].y, 2);

    bar[2][2].x = 5;
    bar[2][2].y = 5;

    test_eq(bar[2][2].x + bar[2][2].x, 10);

    bar[1][2].x = 6;
    bar[2][1].y = 9;

    test_eq(bar[1][2].x + bar[2][1].y, 15);

    bar[2][1].zero();
    test_eq(bar[2][1].x + bar[2][1].y, 0);
    bar[2][1].add();
    test_eq(bar[2][1].x + bar[2][1].y, 2);

    bar[2][1].set(6,9);
    test_eq(bar[2][1].x + bar[2][1].y, 15);
    test_eq(bar[2][1].getSum(), 15);

}

fn write(data:&u8) void {
    asm {
        "mov rsi, [rdi+8]"
        "mov rdx, [rdi +0]"
        "mov rdi, 1"
        "mov rax, 1"
        "syscall"
    }
}


fn test_eq(a:u64, b:u64) void {
    if(a == b) {
        write("ok\n");
        return;
    }

    write("fail\n");
}


// [][3]Bar{
//         []Bar{Bar{.x = 0, .y = 0}, Bar{.x = 1, .y = 0}, Bar{.x = 2, .y = 0}},
//         []Bar{Bar{.x = 0, .y = 1}, Bar{.x = 1, .y = 1}, Bar{.x = 2, .y = 1}},
//         []Bar{Bar{.x = 0, .y = 2}, Bar{.x = 1, .y = 2}, Bar{.x = 2, .y = 2}}
//     };
