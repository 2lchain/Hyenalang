var total = 0;
var passed = 0;
var failed = 0;

fn write(data:str) void {
    asm {
        "mov rsi, [rdi+8]"
        "mov rdx, [rdi +0]"
        "mov rdi, 1"
        "mov rax, 1"
        "syscall"
    }
}


fn test(a:bool) void {
    total = total + 1;
    if(a) {
        write("test: ok\n");
        passed = passed + 1;
    } else {
        write("test: fail\n");
        failed = failed + 1;
    }
}

fn test_eql(a:bool, b:bool) void {
    total = total + 1;
    if(a eq b) {
        write("test: ok\n");
        passed = passed + 1;
    } else {
        failed = failed + 1;
        write("test: fail\n");
    }
}

fn add_u8(a:u8, b:u8) u8 {
    return a + b;
}

fn add_u16(a:u16, b:u16) u16 {
    return a + b;
}

fn add_u32(a:u32, b:u32) u32 {
    return a + b; 
}

fn add_u64(a:u64, b:u64) u64 {
    return a + b;
}

fn add_i8(a:i8, b:i8) i8 {
    return a + b;
}

fn add_i16(a:i16, b:i16) i16 {
    return a + b;
}

fn add_i32(a:i32, b:i32) i32 {
    return a + b; 
}

fn add_i64(a:i64, b:i64) i64 {
    return a + b;
}


fn div_i8(a:i8, b:i8) i8 {
    return a / b;
}

fn div_i16(a:i16, b:i16) i16 {
    return a / b;
}

fn div_i32(a:i32, b:i32) i32 {
    return a / b; 
}

fn div_i64(a:i64, b:i64) i64 {
    return a / b;
}


fn mul_i8(a:i8, b:i8) i8 {
    return a * b;
}

fn mul_i16(a:i16, b:i16) i16 {
    return a * b;
}

fn mul_i32(a:i32, b:i32) i32 {
    return a * b; 
}

fn mul_i64(a:i64, b:i64) i64 {
    return a * b;
}


fn sub_i8(a:i8, b:i8) i8 {
    return a - b;
}

fn sub_i16(a:i16, b:i16) i16 {
    return a - b;
}

fn sub_i32(a:i32, b:i32) i32 {
    return a - b; 
}

fn sub_i64(a:i64, b:i64) i64 {
    return a - b;
}

fn main() void {
    var i = 0;
    write("testing loop\n");
    while(i < 50) {
        test_eql(i, i);
        i = i + 1;
    }

    i = 0;

    write("testing loop integrity\n");
    while(i < 50) {
        test_eql(i < 50, true);
        i = i + 1;
    }

    i = 0;

    write("testing i8\n");
    while(i < 50) {
        test_eql(add_i8(i, 10), i + 10);
        test_eql(div_i8(i, 2), i/2);
        test_eql(mul_i8(i, 2), i * 2);
        test_eql(sub_i8(i, 20), i - 20);
        i = i + 1;
    }

    i = 0;

    write("testing i16\n");
    while(i < 50) {
        test_eql(add_i16(i, 20), i + 20);
        test_eql(div_i16(i, 2), i/2);
        test_eql(mul_i32(i, 2), i * 2);
        test_eql(sub_i64(i, 20), i - 20);
        i = i + 1;
    }

    i = 0;

    write("testing i32\n");
    while(i < 50) {
        test_eql(add_i32(i, 20), i + 20);
        test_eql(div_i32(i, 2), i/2);
        test_eql(mul_i32(i, 2), i * 2);
        test_eql(sub_i32(i, 20), i - 20);
        i = i + 1;
    }

    i = 0;

    write("testing i64\n");
    while(i < 50) {
        test_eql(add_i64(i, 20), i + 20);
        test_eql(div_i64(i, 2), i/2);
        test_eql(mul_i64(i, 2), i * 2);
        test_eql(sub_i64(i, 20), i - 20);
        i = i + 1;
    }
}

